// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/UserInfoService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fUserInfoService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fUserInfoService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fmain_2fproto_2fUserInfoService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fmain_2fproto_2fUserInfoService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fmain_2fproto_2fUserInfoService_2eproto;
class UserInfoUpdateRequest;
struct UserInfoUpdateRequestDefaultTypeInternal;
extern UserInfoUpdateRequestDefaultTypeInternal _UserInfoUpdateRequest_default_instance_;
class UserInfoUpdateResponse;
struct UserInfoUpdateResponseDefaultTypeInternal;
extern UserInfoUpdateResponseDefaultTypeInternal _UserInfoUpdateResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::UserInfoUpdateRequest* Arena::CreateMaybeMessage<::UserInfoUpdateRequest>(Arena*);
template<> ::UserInfoUpdateResponse* Arena::CreateMaybeMessage<::UserInfoUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserInfoUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoUpdateRequest) */ {
 public:
  inline UserInfoUpdateRequest() : UserInfoUpdateRequest(nullptr) {}
  ~UserInfoUpdateRequest() override;
  explicit constexpr UserInfoUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoUpdateRequest(const UserInfoUpdateRequest& from);
  UserInfoUpdateRequest(UserInfoUpdateRequest&& from) noexcept
    : UserInfoUpdateRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoUpdateRequest& operator=(const UserInfoUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoUpdateRequest& operator=(UserInfoUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoUpdateRequest*>(
               &_UserInfoUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoUpdateRequest& a, UserInfoUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoUpdateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoUpdateRequest* New() const final {
    return new UserInfoUpdateRequest();
  }

  UserInfoUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfoUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoUpdateRequest";
  }
  protected:
  explicit UserInfoUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstnameFieldNumber = 1,
    kLastnameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kDobFieldNumber = 4,
  };
  // string firstname = 1;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_MUST_USE_RESULT std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastname = 2;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string dob = 4;
  void clear_dob();
  const std::string& dob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dob();
  PROTOBUF_MUST_USE_RESULT std::string* release_dob();
  void set_allocated_dob(std::string* dob);
  private:
  const std::string& _internal_dob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dob(const std::string& value);
  std::string* _internal_mutable_dob();
  public:

  // @@protoc_insertion_point(class_scope:UserInfoUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fUserInfoService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoUpdateResponse) */ {
 public:
  inline UserInfoUpdateResponse() : UserInfoUpdateResponse(nullptr) {}
  ~UserInfoUpdateResponse() override;
  explicit constexpr UserInfoUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoUpdateResponse(const UserInfoUpdateResponse& from);
  UserInfoUpdateResponse(UserInfoUpdateResponse&& from) noexcept
    : UserInfoUpdateResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoUpdateResponse& operator=(const UserInfoUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoUpdateResponse& operator=(UserInfoUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoUpdateResponse*>(
               &_UserInfoUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfoUpdateResponse& a, UserInfoUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoUpdateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoUpdateResponse* New() const final {
    return new UserInfoUpdateResponse();
  }

  UserInfoUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfoUpdateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoUpdateResponse";
  }
  protected:
  explicit UserInfoUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstnameFieldNumber = 1,
    kLastnameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kDobFieldNumber = 4,
    kLastupdateFieldNumber = 5,
  };
  // string firstname = 1;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_MUST_USE_RESULT std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastname = 2;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string dob = 4;
  void clear_dob();
  const std::string& dob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dob();
  PROTOBUF_MUST_USE_RESULT std::string* release_dob();
  void set_allocated_dob(std::string* dob);
  private:
  const std::string& _internal_dob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dob(const std::string& value);
  std::string* _internal_mutable_dob();
  public:

  // string lastupdate = 5;
  void clear_lastupdate();
  const std::string& lastupdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastupdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastupdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastupdate();
  void set_allocated_lastupdate(std::string* lastupdate);
  private:
  const std::string& _internal_lastupdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastupdate(const std::string& value);
  std::string* _internal_mutable_lastupdate();
  public:

  // @@protoc_insertion_point(class_scope:UserInfoUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastupdate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fmain_2fproto_2fUserInfoService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoUpdateRequest

// string firstname = 1;
inline void UserInfoUpdateRequest::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateRequest::firstname() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateRequest.firstname)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateRequest::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateRequest.firstname)
}
inline std::string* UserInfoUpdateRequest::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateRequest.firstname)
  return _s;
}
inline const std::string& UserInfoUpdateRequest::_internal_firstname() const {
  return firstname_.Get();
}
inline void UserInfoUpdateRequest::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::release_firstname() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateRequest.firstname)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateRequest::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateRequest.firstname)
}

// string lastname = 2;
inline void UserInfoUpdateRequest::clear_lastname() {
  lastname_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateRequest::lastname() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateRequest.lastname)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateRequest::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateRequest.lastname)
}
inline std::string* UserInfoUpdateRequest::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateRequest.lastname)
  return _s;
}
inline const std::string& UserInfoUpdateRequest::_internal_lastname() const {
  return lastname_.Get();
}
inline void UserInfoUpdateRequest::_internal_set_lastname(const std::string& value) {
  
  lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::_internal_mutable_lastname() {
  
  return lastname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::release_lastname() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateRequest.lastname)
  return lastname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateRequest::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateRequest.lastname)
}

// string email = 3;
inline void UserInfoUpdateRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateRequest::email() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateRequest.email)
}
inline std::string* UserInfoUpdateRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateRequest.email)
  return _s;
}
inline const std::string& UserInfoUpdateRequest::_internal_email() const {
  return email_.Get();
}
inline void UserInfoUpdateRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::release_email() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateRequest.email)
}

// string dob = 4;
inline void UserInfoUpdateRequest::clear_dob() {
  dob_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateRequest::dob() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateRequest.dob)
  return _internal_dob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateRequest::set_dob(ArgT0&& arg0, ArgT... args) {
 
 dob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateRequest.dob)
}
inline std::string* UserInfoUpdateRequest::mutable_dob() {
  std::string* _s = _internal_mutable_dob();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateRequest.dob)
  return _s;
}
inline const std::string& UserInfoUpdateRequest::_internal_dob() const {
  return dob_.Get();
}
inline void UserInfoUpdateRequest::_internal_set_dob(const std::string& value) {
  
  dob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::_internal_mutable_dob() {
  
  return dob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateRequest::release_dob() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateRequest.dob)
  return dob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateRequest::set_allocated_dob(std::string* dob) {
  if (dob != nullptr) {
    
  } else {
    
  }
  dob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dob,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateRequest.dob)
}

// -------------------------------------------------------------------

// UserInfoUpdateResponse

// string firstname = 1;
inline void UserInfoUpdateResponse::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateResponse::firstname() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateResponse.firstname)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateResponse::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateResponse.firstname)
}
inline std::string* UserInfoUpdateResponse::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateResponse.firstname)
  return _s;
}
inline const std::string& UserInfoUpdateResponse::_internal_firstname() const {
  return firstname_.Get();
}
inline void UserInfoUpdateResponse::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::release_firstname() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateResponse.firstname)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateResponse::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateResponse.firstname)
}

// string lastname = 2;
inline void UserInfoUpdateResponse::clear_lastname() {
  lastname_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateResponse::lastname() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateResponse.lastname)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateResponse::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateResponse.lastname)
}
inline std::string* UserInfoUpdateResponse::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateResponse.lastname)
  return _s;
}
inline const std::string& UserInfoUpdateResponse::_internal_lastname() const {
  return lastname_.Get();
}
inline void UserInfoUpdateResponse::_internal_set_lastname(const std::string& value) {
  
  lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::_internal_mutable_lastname() {
  
  return lastname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::release_lastname() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateResponse.lastname)
  return lastname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateResponse::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateResponse.lastname)
}

// string email = 3;
inline void UserInfoUpdateResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateResponse::email() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateResponse.email)
}
inline std::string* UserInfoUpdateResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateResponse.email)
  return _s;
}
inline const std::string& UserInfoUpdateResponse::_internal_email() const {
  return email_.Get();
}
inline void UserInfoUpdateResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::release_email() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateResponse.email)
}

// string dob = 4;
inline void UserInfoUpdateResponse::clear_dob() {
  dob_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateResponse::dob() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateResponse.dob)
  return _internal_dob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateResponse::set_dob(ArgT0&& arg0, ArgT... args) {
 
 dob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateResponse.dob)
}
inline std::string* UserInfoUpdateResponse::mutable_dob() {
  std::string* _s = _internal_mutable_dob();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateResponse.dob)
  return _s;
}
inline const std::string& UserInfoUpdateResponse::_internal_dob() const {
  return dob_.Get();
}
inline void UserInfoUpdateResponse::_internal_set_dob(const std::string& value) {
  
  dob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::_internal_mutable_dob() {
  
  return dob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::release_dob() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateResponse.dob)
  return dob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateResponse::set_allocated_dob(std::string* dob) {
  if (dob != nullptr) {
    
  } else {
    
  }
  dob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dob,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateResponse.dob)
}

// string lastupdate = 5;
inline void UserInfoUpdateResponse::clear_lastupdate() {
  lastupdate_.ClearToEmpty();
}
inline const std::string& UserInfoUpdateResponse::lastupdate() const {
  // @@protoc_insertion_point(field_get:UserInfoUpdateResponse.lastupdate)
  return _internal_lastupdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoUpdateResponse::set_lastupdate(ArgT0&& arg0, ArgT... args) {
 
 lastupdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfoUpdateResponse.lastupdate)
}
inline std::string* UserInfoUpdateResponse::mutable_lastupdate() {
  std::string* _s = _internal_mutable_lastupdate();
  // @@protoc_insertion_point(field_mutable:UserInfoUpdateResponse.lastupdate)
  return _s;
}
inline const std::string& UserInfoUpdateResponse::_internal_lastupdate() const {
  return lastupdate_.Get();
}
inline void UserInfoUpdateResponse::_internal_set_lastupdate(const std::string& value) {
  
  lastupdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::_internal_mutable_lastupdate() {
  
  return lastupdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoUpdateResponse::release_lastupdate() {
  // @@protoc_insertion_point(field_release:UserInfoUpdateResponse.lastupdate)
  return lastupdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoUpdateResponse::set_allocated_lastupdate(std::string* lastupdate) {
  if (lastupdate != nullptr) {
    
  } else {
    
  }
  lastupdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastupdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserInfoUpdateResponse.lastupdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fmain_2fproto_2fUserInfoService_2eproto
